generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model hackathons {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  created_by    String?           @db.Uuid
  start_date    DateTime          @db.Timestamp(6)
  end_date      DateTime          @db.Timestamp(6)
  status        hackathon_status? @default(UPCOMING)
  created_at    DateTime?         @default(now()) @db.Timestamp(6)
  updated_at    DateTime?         @default(now()) @db.Timestamp(6)
  users         users?            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  registrations registrations[]
  submissions   submissions[]
  teams         teams[]
}

model registrations {
  user_id       String     @db.Uuid
  hackathon_id  String     @db.Uuid
  registered_at DateTime?  @default(now()) @db.Timestamp(6)
  hackathons    hackathons @relation(fields: [hackathon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, hackathon_id])
}

model roles {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role       role_type    @default(PARTICIPANT)
  user_roles user_roles[]
}

model submissions {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id      String?     @db.Uuid
  hackathon_id String?     @db.Uuid
  github_url   String?
  demo_url     String?
  mvp_url      String?
  description  String?
  submitted_at DateTime?   @default(now()) @db.Timestamp(6)
  hackathons   hackathons? @relation(fields: [hackathon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams        teams?      @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team_members {
  team_id   String    @db.Uuid
  user_id   String    @db.Uuid
  joined_at DateTime? @default(now()) @db.Timestamp(6)
  teams     teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([team_id, user_id])
}

model teams {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  hackathon_id String?        @db.Uuid
  created_by   String?        @db.Uuid
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  submissions  submissions[]
  team_members team_members[]
  users        users?         @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hackathons   hackathons?    @relation(fields: [hackathon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_roles {
  role_id     String    @db.Uuid
  user_id     String    @db.Uuid
  assigned_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

model users {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String          @unique
  password      String
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  hackathons    hackathons[]
  registrations registrations[]
  team_members  team_members[]
  teams         teams[]
  user_roles    user_roles[]
}

enum hackathon_status {
  UPCOMING
  LIVE
  COMPLETED
}

enum role_type {
  PARTICIPANT
  HOST
  ADMIN
}
